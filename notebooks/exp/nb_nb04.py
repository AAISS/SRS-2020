
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/nb04_frequency_domain_features.ipynb

from exp.nb_nb03 import *
from scipy.fftpack import dct

import librosa.display

def stft (frames, NFFT = None):
    if not NFFT:
        NFFT = len(frames[0])
    return np.absolute(np.fft.rfft(frames, NFFT))  # Magnitude of the FFT

def mel_filter_bank(nfilt= 40, NFFT =512,sr = 16000):
    low_freq_mel = 0
    high_freq_mel = (2595 * np.log10(1 + (sr / 2) / 700))  # Convert Hz to Mel
    mel_points = np.linspace(low_freq_mel, high_freq_mel, nfilt + 2)  # Equally spaced in Mel scale
    hz_points = (700 * (10**(mel_points / 2595) - 1))  # Convert Mel to Hz
    bins = np.floor(NFFT * hz_points / sr)
    fbank = np.zeros((nfilt, int(np.floor(NFFT / 2 + 1))))
    for m in range(1, nfilt + 1):
        f_m_minus = int(bins[m - 1])   # left
        f_m = int(bins[m])             # center
        f_m_plus = int(bins[m + 1])    # right
        for k in range(f_m_minus, f_m):
            fbank[m - 1, k] = (k - bins[m - 1]) / (bins[m] - bins[m - 1])
        for k in range(f_m, f_m_plus):
            fbank[m - 1, k] = (bins[m + 1] - k) / (bins[m + 1] - bins[m])
    return fbank

def mfcc(frames, nceps = 13, nfilt = 40, sr=16000, mean_normaliation = False, plot = False, stride = None):
    NFFT = len(frames[0])
    mag_frames = stft(frames, NFFT)
    pow_frames = ((1.0 / NFFT) * ((mag_frames) ** 2))  # Power Spectrum
    fbank = mel_filter_bank(nfilt, NFFT, sr)
    result = np.dot(pow_frames, fbank.T)
    stable_result = np.where(result == 0, np.finfo(float).eps, result)  # Numerical Stability
    stable_result_db = 20 * np.log10(stable_result)  # dB
    if mean_normaliation:
        stable_result_db -= (np.mean(stable_result_db, axis=0) + 1e-8)
    if plot:
        plt.figure(figsize=(10,10))
        librosa.display.specshow(stable_result_db.T, y_axis='linear',x_axis = 'time', sr = sr,hop_length=stride )
        plt.colorbar(format='%+2.0f dB')
        plt.title('Linear-frequency power Narrowband-spectrogram')
        plt.show()
    mfcc = dct(stable_result_db, type=2, axis=1, norm='ortho')[:, 1 : (nceps + 1)]
    return mfcc

def delta(feat, N =2):
    if N < 1:
        raise ValueError('N must be an integer >= 1')
    NUMFRAMES = len(feat)
    denominator = 2 * sum([i**2 for i in range(1, N+1)])
    delta_feat = np.empty_like(feat)
    padded = np.pad(feat, ((N, N), (0, 0)), mode='edge')   # padded version of feat
    for t in range(NUMFRAMES):
        delta_feat[t] = np.dot(np.arange(-N, N+1), padded[t : t+2*N+1]) / denominator   # [t : t+2*N+1] == [(N+t)-N : (N+t)+N+1]
    return delta_feat