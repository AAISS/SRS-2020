
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/nb02_speech_preprocessing.ipynb

from exp.nb_nb01 import *

def pre_emphasis(y, alpha = 0.97):
    return np.append(y[0],y[1:]-alpha*y[:-1])

def framing(y, sr, frame_length = 0.025, stride = 0.01, drop_last = True):
    frame_length, stride_length = int(frame_length*sr), int(stride*sr)
    if stride_length == 0:
        stride_length =frame_length
    frames = []
    for i in range(0,len(y)-frame_length, stride_length):
        frames.append(y[i:i+frame_length])
    if not drop_last:
        remaining = len(y)%frame_length
        frames.append(np.append(y[-remaining:], [0]*remaining))
    return np.array(frames)

from scipy.signal import triang, hamming, hann

def windowing(frame, window = hann):
    return frame*hann(len(frame))

def remove_silence(y,sr,frame_length = 0.025, threshold = 0.015):
    frames = framing(y,sr,frame_length,stride=0)
    result = []
    for frame in frames:
        frame_energy = np.mean(np.abs(frame))
        if frame_energy>threshold:
            result+= list(frame)
    return np.array(result)

def pre_process(y,
                sr,
                window = hann,
                alpha = 0.97,
                frame_length = 0.025,
                stride = 0.01,
                drop_last = True,
                rs = False):
    if rs:
        y = remove_silence(y,sr)
    y = pre_emphasis(y, alpha)
    frames = framing(y, sr, frame_length, stride, drop_last)
    for i,frame in enumerate(frames):
        frames[i] = windowing(frame, window)
    return frames